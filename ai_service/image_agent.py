import os
import logging
import base64
from google import genai
from dotenv import load_dotenv

logger = logging.getLogger(__name__)

def initialize_image_agent():
    """
    Initializes the image agent by ensuring the API key is available.
    The client is created on-the-fly for this library.
    """
    logger.info("Initializing Image Agent...")
    load_dotenv()
    if not os.getenv("GEMINI_API_KEY"):
        raise ValueError("GEMINI_API_KEY not found for Image Agent.")
    logger.info("Image Agent ready.")


async def generate_avatar(prompt: str) -> str:
    """
    Generates an avatar image using the 'google-genai' library.
    """
    try:
        # This client is created per-request as per library examples
        client = genai.Client()
        logger.info(f"Generating image with prompt: {prompt}")
        
        result = client.models.generate_images(
            model="models/imagen-4.0-generate-preview-06-06",
            prompt=prompt,
            config=dict(
                number_of_images=1,
                output_mime_type="image/png"
            )
        )

        if not result.generated_images:
            raise Exception("No images were generated by the API.")

        image_bytes = result.generated_images[0].image.image_bytes
        b64_data = base64.b64encode(image_bytes).decode('utf-8')
        mime_type = "image/png"
        
        return f"data:{mime_type};base64,{b64_data}"

    except Exception as e:
        logger.error(f"Error in generate_avatar: {e}")
        raise 