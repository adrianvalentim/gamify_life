# Gamify Journal Project - Detailed Information

This document provides comprehensive information about the Gamify Journal project. Its purpose is to guide developers (both human and AI) working on this codebase, ensuring consistency, clarity, and efficient development. Please keep this document updated as the project evolves.

## 1. Project Overview

*   **Purpose**: To make journaling more engaging and consistent by incorporating RPG-like game mechanics.
*   **Goals**:
    *   Encourage daily or regular journaling habits.
    *   Provide users with a sense of progress, achievement, and character development through journaling.
    *   Create a simple, intuitive, and visually appealing user interface.
*   **Target Audience**: Individuals looking to build/maintain a journaling habit, users interested in self-improvement, people who enjoy gamified experiences or RPG elements.

## 2. Technology Stack

*   **Frontend Language**: TypeScript 5.x
*   **Frontend Framework/Library**: Next.js 15.2.4 (React 19.x)
*   **Backend Language**: Go (e.g., 1.24.2+)
*   **Backend Framework/Router**: Chi (v5)
*   **Database**: PostgreSQL (confirmed via `DB_DSN` for Go backend)
*   **ORM/Database Client**: GORM (`gorm.io/gorm`)
*   **Backend Libraries**:
    *   `gorm.io/driver/postgres` (PostgreSQL driver for GORM)
    *   `github.com/google/uuid` (UUID generation)
    *   `golang.org/x/crypto/bcrypt` (Password hashing)
*   **Styling**: Tailwind CSS 3.4.17 (using shadcn/ui components)
*   **State Management (Frontend)**: React Context API / Local State (Default Next.js/React, check for dedicated library usage if needed)
*   **External APIs/Services**:
    *   [List any external services, e.g., OpenAI API for potential AI features, Stripe for payments (if planned)]
*   **Development Tools**:
    *   Package Managers: Go Modules (backend), pnpm (frontend)
    *   Linters: `gofmt` (standard Go formatter), `golangci-lint` (Recommended for Go), ESLint (Frontend - via `next lint`)
    *   Formatters: `gofmt` (standard Go formatter), Prettier (Frontend - assumed, check config)
    *   Build Tools: Go build tools (`go build`), Next.js build process
    *   Testing Frameworks: Go testing package (`go test`), [e.g., Jest/React Testing Library (Frontend - add if used)]
    *   Version Control: Git

## 3. Architecture Overview

*   **High-Level Design**: Monolithic application with distinct frontend (Next.js) and backend (Go with Chi router) components, housed in separate `frontend/` and `backend/` directories respectively. API-driven communication.
*   **Key Components**:
    *   `backend/`: Contains all Go backend code. Handles API requests, business logic, database interactions.
        *   `backend/cmd/server/main.go`: Main application entry point, server setup.
        *   `backend/internal/models/`: Go struct definitions for database schema (using GORM tags).
        *   `backend/internal/<module>/<module>_handler.go` (e.g., `backend/internal/user/user_handler.go`): HTTP request handlers (Chi). Defines request/response DTOs.
        *   `backend/internal/<module>/<module>_service.go` (e.g., `backend/internal/user/user_service.go`): Business logic for specific modules.
        *   `backend/internal/<module>/<module>_store.go` (e.g., `backend/internal/user/user_store.go`): Data persistence logic using GORM.
        *   `backend/internal/platform/database/database.go`: Database connection (GORM) and session management.
        *   Authentication logic would reside in relevant Go packages/modules within `backend/`.
    *   `frontend/`: Contains all Next.js frontend code.
        *   `frontend/app/`: Next.js App Router structure (pages, layouts).
        *   `frontend/components/`: Reusable UI elements (likely shadcn/ui based).
        *   `frontend/lib/`: Utility functions (e.g., `cn` for classnames).
        *   `frontend/hooks/`: Custom React hooks.
        *   `frontend/styles/`: Global CSS (`globals.css`).
        *   `frontend/package.json`, `frontend/pnpm-lock.yaml`, etc.: Frontend specific configurations.
*   **Data Flow**: User interacts with Next.js Frontend (running from `frontend/`) -> Frontend sends API request to Go Backend (running from `backend/`) -> Backend processes request (validates DTOs, interacts with DB via GORM, applies gamification logic) -> Backend sends JSON response to Frontend -> Frontend updates UI (React state).
*   **Design Patterns**: Separation of concerns (handler -> service -> store in Go backend), Dependency Injection (Go practices), [List other key patterns, e.g., Repository pattern (potentially in DB interactions with GORM)]

## 4. Setup and Installation

*   **Prerequisites**:
    *   Go (e.g., version 1.24.2+ as per `go.mod` or project requirements)
    *   Node.js v18+ (Recommended for Next.js/pnpm)
    *   pnpm (`npm install -g pnpm`)
    *   [Database Server if not using SQLite, e.g., PostgreSQL]
*   **Cloning**:
    *   Repository: `[Link to your Git repository]`
    *   Command: `git clone [Repository URL]`
    *   Main Branch: `main` (or `master`)
    *   Development Branches: Feature branches named like `feature/add-streak-counter`, bugfixes `fix/login-error`.
*   **Dependency Installation**:
    *   Backend (Go): `cd backend && go mod tidy` (run from project root, or `go mod tidy` from `backend/` dir). Downloads dependencies defined in `backend/go.mod`.
    *   Frontend: `cd frontend && pnpm install` (run from project root, or `pnpm install` from `frontend/` dir).
*   **Configuration**:
    *   Backend (Go): Resides in `backend/`. Uses environment variables. Key variable is `DB_DSN`. Example: `export DB_DSN="host=localhost ..."`. Other variables like `PORT` might be used. No `.env` file usage confirmed; manage environment variables directly when running from `backend/`.
    *   Frontend: Resides in `frontend/`. Copy `frontend/.env.local.example` to `frontend/.env.local` (if exists) and fill variables (e.g., `NEXT_PUBLIC_API_URL=http://localhost:8080`).
    *   Ensure backend secrets are managed securely (not committed to Git).
*   **Database Setup**:
    *   Ensure PostgreSQL server is running.
    *   Configure `DB_DSN` environment variable for the Go backend (when running from `backend/`).
    *   Create the database if necessary (e.g., `CREATE DATABASE gamify_journal_db;`).
    *   Database migrations are handled automatically by GORM on application startup (`DB.AutoMigrate()` in `backend/internal/platform/database/database.go`). This happens when the Go backend is started from the `backend/` directory.
    *   (Optional) Seed database: [Add command if seeding scripts exist for Go backend, to be run from `backend/`]
*   **Secrets Management**:
    *   Sensitive keys (API keys, production database credentials like `DB_DSN`, any backend secret keys) should NEVER be committed to Git.
    *   Use environment variables for local development and production/staging (provided by hosting platform or secrets manager).

## 5. Running the Project

*   **Development Servers**:
    *   Backend (Go): `cd backend && go run cmd/server/main.go` (run from project root). Server typically runs on port 8080 unless `PORT` env var is set.
    *   Frontend: `cd frontend && pnpm dev` (run from project root). Server typically runs on port 3000.
*   **Running Tests**:
    *   Backend (Go): `cd backend && go test ./...` or `cd backend && go test ./internal/...` (run from project root, or relative from `backend/` dir).
    *   Frontend: `cd frontend && pnpm test` (run from project root, or `pnpm test` from `frontend/` dir).
*   **Linting/Formatting**:
    *   Backend (Go): `cd backend && gofmt -w .` (to format all Go files in `backend/` and its subdirectories), `cd backend && golangci-lint run` (if `golangci-lint` is installed and configured).
    *   Frontend: `cd frontend && pnpm lint` (Uses Next.js built-in ESLint), `cd frontend && pnpm format` (Add Prettier script if needed).

## 6. Codebase Structure

*   **Project Root (`gamify_journal/`)**
    *   `frontend/`: Contains all frontend-related code (Next.js/React).
        *   `frontend/app/`: Next.js App Router directory.
        *   `frontend/components/`: Shared UI components.
        *   `frontend/hooks/`: Custom React hooks.
        *   `frontend/lib/`: Utility functions.
        *   `frontend/public/`: Static assets served directly.
        *   `frontend/styles/`: Global stylesheets.
        *   `frontend/package.json`: Frontend dependencies and scripts.
        *   `frontend/pnpm-lock.yaml`: Frontend lock file.
        *   `frontend/tailwind.config.ts`, `frontend/postcss.config.mjs`, `frontend/tsconfig.json`, `frontend/next.config.mjs`: Frontend configurations.
        *   `frontend/.gitignore`: Frontend specific Git ignores.
        *   `frontend/tests/`: (Recommended) Frontend tests.
    *   `backend/`: Contains all backend-related code (Go).
        *   `backend/cmd/server/main.go`: Go backend application entry point.
        *   `backend/internal/`: Go backend internal packages (models, handlers, services, platform code).
        *   `backend/pkg/`: (Optional) Go backend shared libraries.
        *   `backend/go.mod`: Go backend module definition and dependencies.
        *   `backend/go.sum`: Go backend dependency checksums.
        *   `backend/.gitignore`: Backend specific Git ignores.
        *   `backend/tests/`: (Recommended, if you create a top-level test dir for backend)
    *   `docs/`: Contains project documentation.
        *   `docs/detailed_info.txt`: This file.
    *   `README.md`: High-level project overview and basic setup instructions.
    *   `.gitignore`: Specifies global files/directories ignored by Git.

## 7. Coding Standards and Conventions

*   **Style Guides**:
    *   Backend (Go): Effective Go guidelines. Formatting enforced by `gofmt`. Use `golangci-lint` for comprehensive linting (Recommended).
    *   Frontend: ESLint (via `next lint`). Prettier for formatting (Recommended - configure `package.json` script).
*   **Naming Conventions**:
    *   Go: Use `camelCase` for unexported identifiers, `PascalCase` (CamelCase with first letter uppercase) for exported identifiers. Package names are typically short, lowercase, single words.
    *   Frontend: [Specify frontend naming conventions, e.g., PascalCase for React components, camelCase for variables/functions].
*   **Commit Messages**: [e.g., Conventional Commits: `feat: add user login endpoint`, `fix: resolve issue with quest completion`]
*   **Branching Strategy**: [e.g., Gitflow variant: `main`, `develop`, feature branches (`feature/feature-name`), bugfix branches (`bugfix/bug-name`), release branches (`release/version`)]

## 8. API Endpoints

*   Refer to the Go backend handlers (e.g., `backend/internal/user/user_handler.go`) or API documentation (e.g., Swagger/OpenAPI if generated) for detailed API specifications.
*   Initial endpoints (as per Go backend details):
    *   `GET /health`: Health check.
    *   `POST /api/v1/users/register`: Register a new user.
    *   `POST /api/v1/auth/login`: Login an existing user.
    *   `GET /api/v1/users/{userID}`: Get user details by ID.

## 8.1. Character Module (New Feature - In Progress)

The Character module is being implemented to allow users to create and manage RPG-style characters that level up based on their journaling activity.

*   **Purpose**: Enhance user engagement by gamifying the journaling experience with character progression.
*   **Core Components**:
    *   `backend/internal/models/character.go`: Defines the `Character` GORM model. Includes fields like `ID`, `UserID` (linking to `models.User`), `Name`, `Class` (enum: `Warrior`, `Mage`, `Rogue`), `Level`, `ExperiencePoints`. Also includes a `BeforeCreate` hook to generate UUIDs.
    *   `backend/internal/character/`: Directory containing the character module's logic.
        *   `backend/internal/character/character_service.go`: Contains the `Service` struct responsible for character business logic (creating characters, granting XP, leveling up). It defines an `ICharacterStore` interface for data persistence and operates using an object-oriented approach (methods on the `Service` struct). Includes input DTOs like `CreateCharacterInput` and basic validation.
        *   `backend/internal/character/character_store.go`: Implements the `ICharacterStore` interface. Contains the `Store` struct that uses GORM to interact with the `characters` database table (CRUD operations).
*   **Key Logic**:
    *   Character creation with a name and class.
    *   XP granting mechanism (e.g., triggered by writing journal entries - integration pending).
    *   Automatic leveling up based on XP thresholds.
*   **Next Steps (Backend)**:
    *   Create `backend/internal/character/character_handler.go` to expose character functionalities via API endpoints (e.g., POST /api/v1/characters, GET /api/v1/characters/user/{userID}).
    *   Update `backend/cmd/server/main.go` to initialize and wire up the character service, store, and handler.
    *   Update `backend/internal/platform/database/database.go` to include `models.Character` in GORM's `AutoMigrate`.
    *   Write unit tests for the character service.
    *   Integrate XP granting with journaling actions.
*   **API Endpoints (Planned)**:
    *   `POST /api/v1/characters`: Create a new character for the authenticated user.
    *   `GET /api/v1/characters/user/{userID}`: Get character details for a specific user.
    *   `GET /api/v1/characters/me`: Get the authenticated user's character (alternative to by userID).
    *   `POST /api/v1/characters/{characterID}/grant-xp`: (Potentially an internal or admin endpoint, or triggered by other actions) Grant XP to a character.

## 9. Deployment

*   **Frontend (Next.js)**: [e.g., Vercel, Netlify, AWS Amplify, Docker container]
*   **Backend (Go)**: [e.g., Docker container on Cloud Run/ECS/Kubernetes, bare metal, serverless function if applicable]
*   **Database (PostgreSQL)**: [e.g., Cloud SQL, RDS, self-hosted]
*   **CI/CD**: [e.g., GitHub Actions, GitLab CI, Jenkins. Describe pipeline steps: lint, test, build, deploy.]

## 10. Future Considerations / Roadmap

*   Implement JWT token generation and authentication middleware for Go backend.
*   Expand unit test coverage for all service methods and edge cases in `user_service_test.go`.
*   Consider integration tests for the store layer (interacting with a test database).
*   Consider E2E/integration tests for HTTP handlers.
*   [Add other planned features or improvements]

---

This document aims to be a living guide. Please update it as the project evolves.